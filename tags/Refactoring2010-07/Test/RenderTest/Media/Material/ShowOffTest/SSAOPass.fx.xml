<?xml version="1.0"?>
<!-- The SSAO pass -->

<root>

<pass>
	<texture
		file="renderBuffer:depth"
		shaderName="texDepth"
	/>

	<texture
		file="renderBuffer:normal"
		shaderName="texNormal"
	/>

	<texture
		file="texture:dither"
		shaderName="texDither"
	/>

	<shader>
		<vertex>
			<![CDATA[
			// Screen space ambient occlusion
			// Reference:
			// http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=showflat&Number=236698&fpart=1
			// http://www.4gamer.net/games/047/G004713/20080223007/screenshot.html?num=002
			// http://www.idevgames.com/forum/showthread.php?t=15149&page=4
			// http://rgba.scenesp.org/iq/computer/articles/ssao/ssao.htm
			// http://meshula.net/wordpress/?p=145

			// Reconstructing position from depth data:
			// http://www.gamedev.net/community/forums/topic.asp?topic_id=506573

			varying vec2 texCoord;
			varying vec2 viewVector;	// The z component is always equal to 1
			uniform float fov;
			uniform int screenWidth;
			uniform int screenHeight;
			uniform float ssaoRescale;

			void main(void)
			{
				gl_Position = ftransform();
				texCoord = gl_MultiTexCoord0.xy / ssaoRescale;
				gl_FrontColor = gl_Color;

				float a = tan(fov / 2.0);
				viewVector.x = a * float(screenWidth) / float(screenHeight);
				viewVector.y = a;

				// gl_Vertex is the squared quard each component having -1 or 1
				viewVector.x *= gl_Vertex.x;
				viewVector.y *= gl_Vertex.y;
			}
			]]>
		</vertex>

		<!-- Define the fragment shader just inside the xml -->
		<fragment>
			<![CDATA[
			uniform sampler2DRect texDepth;	// Depth texture
			uniform sampler2DRect texNormal;// Normal texture
			uniform sampler2D texDither;	// Random normal texture to create a dither pattern

			uniform vec3 ranSphere[32];		// Random points inside an unit sphere

			// We cannot use gl_DepthRange since we are currently rendering the fullscreen quad not the scene
			const vec2 camerarange = vec2(1.0, 500.0);
			uniform mat4 projection;

			varying vec2 texCoord;
			varying vec2 viewVector;

			uniform int screenWidth;
			uniform int screenHeight;
			uniform float radius;
			float r;
			const int sample = 30;
			float oneOverRadius2;

			// Encode a float value into 3 bytes
			// Reference: http://www.ozone3d.net/blogs/lab/?p=113
			vec3 packFloatToVec3i(const float value)
			{
				const vec3 bitSh = vec3(256.0 * 256.0, 256.0, 1.0);
				const vec3 bitMsk = vec3(0.0, 1.0/256.0, 1.0/256.0);
				vec3 res = fract(value * bitSh);
				res -= res.xxy * bitMsk;
				return res;
			}

			float convertDepth(in float d)
			{
				float nearZ = camerarange.x;
				float farZ = camerarange.y;

				return (2.0 * nearZ) / (nearZ + farZ - d * (farZ - nearZ));
			}

			float readDepth(in vec2 coord)
			{
				float d = texture2DRect(texDepth, coord).x;
				return convertDepth(d);
			}

			// Get the view-space poisition by the given screen-space pixel position
			vec3 clipToView(in vec2 viewVector, in float planDepth)
			{
				// The calculation should involve several steps, but the terms get canceled out into
				// a single multiplication, as we setup viewVector.z equals to 1 in vertex shader.
				// vec3 view = normalize(vec3(viewVector, -1));
				// float viewVectorLength = planDepth / -view.z;
				// return view * viewVectorLength;

				return planDepth * vec3(viewVector, 1.0);
			}

			// Get the clip-space poisition by the given view-space position
			vec2 viewToClip(in vec3 ep)
			{
				// Using the projection matrix to project from view space to clip space,
				// but we can ignore the zero terms and the final z component.
				// Original code:
				// vec4 p = projection * vec4(ep, 1);
				// return p.xy / -p.w;

				ep.xy *= vec2(projection[0][0], projection[1][1]);
				return ep.xy / -ep.z * projection[2][3];
			}

			// Clip to screen space transform
			vec3 clipToScreen(in vec2 clipPos)
			{
				vec2 screenXY = clipPos.xy * 0.5 + 0.5;
				screenXY *= vec2(screenWidth, screenHeight);
				return vec3(screenXY, readDepth(screenXY));
			}

			float calAO(in vec3 origin, in vec3 samplePoint, in float sampleDepth)
			{
				if(samplePoint.z < sampleDepth)
					return 0.0;

				vec3 diff = vec3(samplePoint.xy, sampleDepth) - origin;
				float distance2 = dot(diff, diff);

				return 1.0 - min(distance2 * oneOverRadius2, 1.0);
			}

			void main(void)
			{
				const int N = sample;

				float depth = readDepth(texCoord);

				// A little-bit adjustment of the sampling radius according to the distance
				r = radius * 0.5 + 0.5 * radius * depth;
				oneOverRadius2 = 1.0 / (r * r);

				vec3 ep = clipToView(viewVector, depth);
				vec3 n = texture2DRect(texNormal, texCoord).xyz * 2.0 - 1.0;
				n.z = -n.z;

				float ao = 0.0;

				for(int i=0; i<N; ++i)
				{
					// 32 is the size of the dither texture
					vec4 dither = texture2D(texDither, texCoord / 32.0);

					// Get the random vector inside the sphere
					vec3 ranSample = reflect(ranSphere[i], dither.xyz);

					// Seems not much difference for dithering the length of the sample ray
			//		ranSample.xyz *= 2 * dither.w;

					// Flip the sample if it's pointing away from the surface normal
					if(dot(ranSample, n) < 0.0) ranSample = -ranSample;
					ranSample += 0.05 * n;	// Bias towards the normal, to reduce self occlusion

					vec3 ep2 = ep + r * ranSample;

					// Project the point back to screen-space, with depth value.
					vec3 sp2 = clipToScreen(viewToClip(ep2));

					ao += calAO(ep, ep2, sp2.z);
				}

				ao /= float(N);
				ao *= 2.5;

				gl_FragColor = vec4(1.0 - ao, packFloatToVec3i(depth / camerarange.y));
			}

			]]>
		</fragment>
	</shader>
</pass>

</root>