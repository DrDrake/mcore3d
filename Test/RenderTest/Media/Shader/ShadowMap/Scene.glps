varying vec3 normal, lightDir, halfVector;
varying vec2 colorCoord;
varying vec4 shadowCoord;
uniform sampler2D colorTex;
uniform sampler2DShadow shadowTex;

// Light intensity inside shadow
const float shadowIntensity = 0.5;

void main(void)
{
	// Compute the diffuse, specular, ambient and globalAmbient terms.
	vec4 diffuse = gl_FrontLightProduct[0].diffuse;
	vec4 specular = gl_FrontLightProduct[0].specular;
	vec4 ambient = gl_FrontLightProduct[0].ambient;
//	ambient += gl_FrontLightModelProduct.sceneColor;

	// A fragment shader can't write a varying variable, hence we need
	// a new variable to store the normalized interpolated normal.
	vec3 n = normalize(normal);

	// Compute the dot product between normal and ldir.
	// Since lightDir is a constant so there is no need to normalize it again
	float NdotL = max(dot(n, lightDir), 0.0);

	diffuse *= NdotL;
	vec3 halfV = normalize(halfVector);
	float NdotHV = max(dot(n, halfV), 0.0);
	specular *= pow(NdotHV, gl_FrontMaterial.shininess);

	float shadowFactor = min(1.0, shadowIntensity + shadow2DProj(shadowTex, shadowCoord).r);

	gl_FragData[0] = specular + shadowFactor * (ambient + diffuse) * vec4(texture2D(colorTex, colorCoord).xyz, 1);
}
