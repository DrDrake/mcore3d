// 1D Gaussian Filter
// Reference: http://prideout.net/bloom/index.php

varying vec2 texCoord;
varying vec2 texCoord2;
uniform vec2 blurDirection;
uniform float ssaoRescale;

// SSAO result texture, (r contains ssao value, gba encode the depth value)
uniform sampler2DRect texSSAO;
uniform sampler2DRect texNormal;

vec3 normal;
float depth;
float value;

float unpackFloatFromVec3i(const vec3 value)
{
	const vec3 bitSh = vec3(1.0/(256.0*256.0), 1.0/256.0, 1.0);
	return(500.0 * dot(value, bitSh));
}

float contribution(const float offset)
{
	// Texture coordinate of the sample point
	vec2 tc = texCoord + blurDirection * offset;
	vec2 tc2 = tc / ssaoRescale;

	float depth2 = unpackFloatFromVec3i(texture2DRect(texSSAO, tc).gba);
	float depthFactor = abs(depth - depth2) > 1.0 ? 0.0 : 1.0;

	vec3 normal2 = texture2DRect(texNormal, tc2).xyz * 2.0 - 1.0;
	float normalFactor = dot(normal, normal2) < 0.95 ? 0.0 : 1.0;

	// Factor: 0 -> no blend with the sample, 1 -> Blend with the sample
	float factor = depthFactor * normalFactor;
    return mix(value, texture2DRect(texSSAO, tc).r, factor);
}

void main(void)
{
	gl_FragColor = texture2DRect(texSSAO, texCoord);

	// Original depth
	depth = unpackFloatFromVec3i(texture2DRect(texSSAO, texCoord).gba);

	// Original normal
	normal = texture2DRect(texNormal, texCoord2).xyz * 2.0 - 1.0;

	// Original SSAO value
	value = texture2DRect(texSSAO, texCoord).r;

	gl_FragColor.r = vec4(
		1.0 * contribution(-1.5) +
		2.0 * value +
		1.0 * contribution(1.5)).r;

	gl_FragColor.r /= 4.0;
}
