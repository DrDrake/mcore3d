#summary Material File Format

= Introduction =

This page describes the mcord3d's material file format. Materials in mcore3d are written in xml format and starts with the `<root />` xml-element.
The `<root />` element is then compose of the following children:
 * `<merge />`
 * `<pass />`

Each `<merge />` element describes how the current material is combined with other materials.
Each `<pass />` element corresponds to a rendering pass.

= The `<merge />` element =
todo: add info here

= The `<pass />` element =
A pass contains the following xml-attributes:

|| *Attribute* || *Values* || *Descriptions* ||
|| enable || "true" / "false" || Enabling option. A pass can be enable/disable in run time and this attribute sets the default behavior. ||
|| drawLine || "true" / "false" || If true, the renderer will draw lines instead of triangles ||
|| lineWidth || a floating point number || Width in pixels of the lines to be drawn. This attribute is valid only if drawLine = "true" ||
|| cullMode || "none" / "front" || Set the face to be culled ||
|| alphaBlend(in progress) || "true" / "false" || Enable / disable alpha blending ||
|| srcBlend(in progress) || todo: alpha blend factors|| Source-blend factor in alpha blending ||
|| dstBlend(in progress) || todo: alpha blend factors|| Destination-blend factor in alpha blending ||
|| alphaBlendSep(in progress) || "true" / "false" || Enable / disable separate alpha blending ||
|| srcBlendAlpha(in progress) || todo: alpha blend factors|| Source-blend factor in alpha blending ||
|| dstBlendAlpha(in progress) || todo: alpha blend factors|| Destination-blend factor in alpha blending ||
|| depthTest(in progress) || "true" / "false" || Enable / disable depth testing ||
|| depthWrite(in progress) || "true" / "false" || Enable / disable depth buffer writing ||
|| depthFunc(in progress) || todo: depth function || Depth value comparison function in depth testing ||
|| stencilTest(in progress) || "true" / "false" || Enable / disable stencil testing ||
|| stencilMask(in progress) || an integer number || Assign stencil masking value ||
|| stencilFunc(in progress) || todo: stencil function || Stencil value comparison function in stencil testing ||
|| stencilPassOp(in progress) || todo: stencil operation || Operation to the stencil buffer when the stencil test is passed ||
|| stencilFailOp(in progress) || todo: stencil operation || Operation to the stencil buffer when the stencil test is failed ||
|| stencilDepthFailOp(in progress) || todo: stencil operation || Operation to the stencil buffer when the depth test is failed ||

In addition, a pass has the following children:
 * `<standard />` Fixed pipeline parameters
 * `<texture />` Texture references
 * `<shader />` Shader references

= A example material file =

{{{
<?xml version="1.0"?>
<!-- A sample effect definiation xml -->

<root>

<!-- Material merging mode -->
<merge mode="blend" />

<!-- An example pass which is disabled by default -->
<pass enable="false" />

<!-- Another pass which uses shaders -->
<pass
  enable="true"
  drawLine="false"
>
  <standard
    ambient="0.2, 0.2, 0.2, 1.0"
    diffuse="0.8, 0.6, 0.5, 1.0"
    specular="0.5, 0.5, 0.5, 1.0"
    shininess="30.0"
  />

  <!-- The first occuring texture will use texture unit 0 -->
  <texture
    file="../normal128x128.png"
    shaderName="diffuseMap"
  />

  <shader>
    <!-- Reference external file as vertex shader -->
    <vertex file="./perPixel.glvs" />

    <!-- Define the fragment shader just inside the xml -->
    <fragment>
      <parameter name="exposure" type="float" label="Exposure level">4</parameter>
      <![CDATA[
varying vec3 vertex, normal, lightDir;
uniform sampler2D diffuseMap;
uniform float exposure;

void main()
{
  vec4 ambient = gl_FrontLightProduct[0].ambient;
  vec4 diffuse = gl_FrontLightProduct[0].diffuse;
  vec3 n = normalize(normal);

  diffuse *= max(dot(n, lightDir), 0.0);
  gl_FragColor = (ambient + diffuse) * texture2D(diffuseMap, gl_TexCoord[0].xy);
  gl_FragColor.rgb *= exposure;
  gl_FragColor.a = clamp(gl_FragColor.a, 0.0, 1.0);
}
    ]]>
    </fragment>
  </shader>
</pass>

<!-- Yet another pass which uses fixed-pipeline to lines. -->
<pass
  enable="true"
  drawLine="true"
  lineWidth="5"
  cullMode="front"
>
  <standard
    ambient="1.0, 0.0, 0.0, 1.0"
    diffuse="0.0, 0.0, 0.0, 1.0"
    specular="0.0, 0.0, 0.0, 1.0"
  />
</pass>

</root>
}}}