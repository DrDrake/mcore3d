#summary Material File Format

= Introduction =

This page describes the mcord3d's material file format. Materials in mcore3d are written in xml format and starts with the `<root />` xml-element.
The `<root />` element is then compose of the following children:
 * `<merge />`
 * `<pass />`

Each `<merge />` element describes how the current material is combined with other materials.
Each `<pass />` element corresponds to a rendering pass.

= The `<merge />` element =
todo: add info here

= The `<pass />` element =
A pass contains the following xml-attributes:

 * enable
  * Enabling option. A pass can be enable/disable in run time
    and this attribute sets the default behavior.
  * Syntax: {{{<pass enable = "true" />}}}
  * Values: "true" or "false"

 * drawLine
  * If true, the renderer will draw lines instead of triangles.
  * Syntax: {{{<pass drawLine="true"/>}}}
  * Values: "true" or "false"

 * lineWidth
  * Set the line width in # of pixels. This attribute is valid only if drawLine = "true".
  * Syntax: {{{<pass lineWidth="1.0"/>}}}
  * Values: "true" or "false"

 * cullMode
  * Set the triangle-facing to be culled
  * Syntax: {{{<pass cullMode="none"/>}}}
  * Values: "none", "front"

 * depthTest (in progress)
  * Enable / disable the depth testing
  * Syntax: {{{<pass depthTest="true"/>}}}
  * Values: "true" or "false"

 * depthWrite (in progress)
  * Enable / disable the depth buffer writing
  * Syntax: {{{<pass depthWrite="false"/>}}}
  * Values: "true" or "false"

 * depthFunc (in progress)
  * Set the depth value comparison function
  * Syntax: {{{<pass depthFunc="lessEqual"/>}}} 
  * Values: "less", "lessEqual", "greater", "greaterEqual", "always", "never"

<wiki-comment>
<table border='1'>
  <tr>
    <td>blending(in progress)</td>
    <td>bool</td>
	<td>true</td>
    <td>Enable / disable alpha blending</td>
	<td>{{{<pass blending="true"/>}}}</td>
  </tr>
  <tr>
    <td>blendFactors(in progress)</td>
    <td>blendFactor(srcFactorRGB) blendFactor(dstFactorRGB) blendFactor(srcFactorA) blendFactor(dstFactorA)<br/>
	such that blendFactor = { one, zero, srcAlpha, invSrcAlpha, dstAlpha, invDstAlpha }
	</td>
	<td>one one one one</td>
    <td>Factor being using the blending equation such that:
		Result = srcColor x srcFactorRGB + dstColor x dstFactorRGB
		If the last two parameter is specified,
		separated blending for the alpha channel will be performed.
		Please notice that now all platform / hardware support separated blending for alpha channel.
	</td>
	<td>
{{{
<pass blendFactors="srcAlpha invSrcAlpha"/>
<pass blendFactors="one one srcAlpha invSrcAlpha"/>	
}}}
</td>
  </tr>
  <tr>
    <td>stencilTest(in progress)</td>
    <td>"true" / "false"</td>
	<td>true</td>
    <td>Enable / disable stencil testing</td>
	<td>{{{<pass />}}}</td>
  </tr>
  <tr>
    <td>stencilMask(in progress)</td>
    <td>an integer number</td>
	<td>true</td>
    <td>Assign stencil masking value</td>
	<td>{{{<pass />}}}</td>
  </tr>
  <tr>
    <td>stencilFunc(in progress)</td>
    <td>todo: stencil function</td>
	<td>true</td>
    <td>Stencil value comparison function in stencil testing</td>
	<td>{{{<pass />}}}</td>
  </tr>
  <tr>
    <td>stencilOps(in progress)</td>
    <td>todo: stencil operation</td>
	<td>true</td>
    <td>Operation to the stencil buffer when the stencil test is
    passed</td>
	<td>{{{<pass />}}}</td>
  </tr>
</table>
</wiki-comment>


In addition, a pass has the following children:
 * `<standard />` Fixed pipeline parameters
 * `<texture />` Texture references
 * `<shader />` Shader references

= A example material file =

{{{
<?xml version="1.0"?>
<!-- A sample effect definiation xml -->

<root>

<!-- Material merging mode -->
<merge mode="blend" />

<!-- An example pass which is disabled by default -->
<pass enable="false" />

<!-- Another pass which uses shaders -->
<pass
  enable="true"
  drawLine="false"
>
  <standard
    ambient="0.2, 0.2, 0.2, 1.0"
    diffuse="0.8, 0.6, 0.5, 1.0"
    specular="0.5, 0.5, 0.5, 1.0"
    shininess="30.0"
  />

  <!-- The first occuring texture will use texture unit 0 -->
  <texture
    file="../normal128x128.png"
    shaderName="diffuseMap"
  />

  <shader>
    <!-- Reference external file as vertex shader -->
    <vertex file="./perPixel.glvs" />

    <!-- Define the fragment shader just inside the xml -->
    <fragment>
      <parameter name="exposure" type="float" label="Exposure level">4</parameter>
      <![CDATA[
varying vec3 vertex, normal, lightDir;
uniform sampler2D diffuseMap;
uniform float exposure;

void main()
{
  vec4 ambient = gl_FrontLightProduct[0].ambient;
  vec4 diffuse = gl_FrontLightProduct[0].diffuse;
  vec3 n = normalize(normal);

  diffuse *= max(dot(n, lightDir), 0.0);
  gl_FragColor = (ambient + diffuse) * texture2D(diffuseMap, gl_TexCoord[0].xy);
  gl_FragColor.rgb *= exposure;
  gl_FragColor.a = clamp(gl_FragColor.a, 0.0, 1.0);
}
    ]]>
    </fragment>
  </shader>
</pass>

<!-- Yet another pass which uses fixed-pipeline to lines. -->
<pass
  enable="true"
  drawLine="true"
  lineWidth="5"
  cullMode="front"
>
  <standard
    ambient="1.0, 0.0, 0.0, 1.0"
    diffuse="0.0, 0.0, 0.0, 1.0"
    specular="0.0, 0.0, 0.0, 1.0"
  />
</pass>

</root>
}}}