#summary Material File Format

= Introduction =

This page describes the mcord3d's material file format. Materials in mcore3d are written in xml format and starts with the `<root />` xml-element.
The `<root />` element is then compose of the following children:
 * `<merge />`
 * `<pass />`

Each `<merge />` element describes how the current material is combined with other materials.
Each `<pass />` element corresponds to a rendering pass.

= The `<merge />` element =
todo: add info here

= The `<pass />` element =
A pass contains the following xml-attributes:

<table border='1' cellspacing='0' cellpadding='5'>
  <tr>
    <td>*Attribute*</td>
    <td>*Values*</td>
    <td>*Default*</td>
    <td>*Descriptions*</td>
  </tr>
  <tr>
    <td>enable</td>
    <td>"true" / "false"</td>
    <td>"true"</td>
    <td>Enabling option. A pass can be enable/disable in run time
    and this attribute sets the default behavior.</td>
  </tr>
  <tr>
    <td>drawLine</td>
    <td>"true" / "false"</td>
    <td>"false"</td>
    <td>If true, the renderer will draw lines instead of
    triangles</td>
  </tr>
  <tr>
    <td>lineWidth</td>
    <td>a floating point number</td>
    <td>1</td>
    <td>Width in pixels of the lines to be drawn. This attribute is
    valid only if drawLine = "true"</td>
  </tr>
  <tr>
    <td>cullMode</td>
    <td>"none" / "front"</td>
    <td>"back" if cullMode not present</td>
    <td>Set the face to be culled</td>
  </tr>
  <tr>
    <td>blending(in progress)</td>
    <td>{enable}{srcRGB}{dstRGB}{srcA}{dstA}</td>
    <td>?</td>
    <td>Enable / disable alpha blending</td>
  </tr>
  <tr>
    <td>depthTest(in progress)</td>
    <td>"true" / "false"</td>
    <td>?</td>
    <td>Enable / disable depth testing</td>
  </tr>
  <tr>
    <td>depthWrite(in progress)</td>
    <td>"true" / "false"</td>
    <td>?</td>
    <td>Enable / disable depth buffer writing</td>
  </tr>
  <tr>
    <td>depthFunc(in progress)</td>
    <td>todo: depth function</td>
    <td>?</td>
    <td>Depth value comparison function in depth testing</td>
  </tr>
  <tr>
    <td>stencilTest(in progress)</td>
    <td>"true" / "false"</td>
    <td>?</td>
    <td>Enable / disable stencil testing</td>
  </tr>
  <tr>
    <td>stencilMask(in progress)</td>
    <td>an integer number</td>
    <td>?</td>
    <td>Assign stencil masking value</td>
  </tr>
  <tr>
    <td>stencilFunc(in progress)</td>
    <td>todo: stencil function</td>
    <td>?</td>
    <td>Stencil value comparison function in stencil testing</td>
  </tr>
  <tr>
    <td>stencilPassOp(in progress)</td>
    <td>todo: stencil operation</td>
    <td>?</td>
    <td>Operation to the stencil buffer when the stencil test is
    passed</td>
  </tr>
  <tr>
    <td>stencilFailOp(in progress)</td>
    <td>todo: stencil operation</td>
    <td>?</td>
    <td>Operation to the stencil buffer when the stencil test is
    failed</td>
  </tr>
  <tr>
    <td>stencilDepthFailOp(in progress)</td>
    <td>todo: stencil operation</td>
    <td>?</td>
    <td>Operation to the stencil buffer when the depth test is
    failed</td>
  </tr>
</table>

In addition, a pass has the following children:
 * `<standard />` Fixed pipeline parameters
 * `<texture />` Texture references
 * `<shader />` Shader references

= A example material file =

{{{
<?xml version="1.0"?>
<!-- A sample effect definiation xml -->

<root>

<!-- Material merging mode -->
<merge mode="blend" />

<!-- An example pass which is disabled by default -->
<pass enable="false" />

<!-- Another pass which uses shaders -->
<pass
  enable="true"
  drawLine="false"
>
  <standard
    ambient="0.2, 0.2, 0.2, 1.0"
    diffuse="0.8, 0.6, 0.5, 1.0"
    specular="0.5, 0.5, 0.5, 1.0"
    shininess="30.0"
  />

  <!-- The first occuring texture will use texture unit 0 -->
  <texture
    file="../normal128x128.png"
    shaderName="diffuseMap"
  />

  <shader>
    <!-- Reference external file as vertex shader -->
    <vertex file="./perPixel.glvs" />

    <!-- Define the fragment shader just inside the xml -->
    <fragment>
      <parameter name="exposure" type="float" label="Exposure level">4</parameter>
      <![CDATA[
varying vec3 vertex, normal, lightDir;
uniform sampler2D diffuseMap;
uniform float exposure;

void main()
{
  vec4 ambient = gl_FrontLightProduct[0].ambient;
  vec4 diffuse = gl_FrontLightProduct[0].diffuse;
  vec3 n = normalize(normal);

  diffuse *= max(dot(n, lightDir), 0.0);
  gl_FragColor = (ambient + diffuse) * texture2D(diffuseMap, gl_TexCoord[0].xy);
  gl_FragColor.rgb *= exposure;
  gl_FragColor.a = clamp(gl_FragColor.a, 0.0, 1.0);
}
    ]]>
    </fragment>
  </shader>
</pass>

<!-- Yet another pass which uses fixed-pipeline to lines. -->
<pass
  enable="true"
  drawLine="true"
  lineWidth="5"
  cullMode="front"
>
  <standard
    ambient="1.0, 0.0, 0.0, 1.0"
    diffuse="0.0, 0.0, 0.0, 1.0"
    specular="0.0, 0.0, 0.0, 1.0"
  />
</pass>

</root>
}}}