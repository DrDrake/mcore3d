<?xml version="1.0"?>
<!-- A sample effect definiation xml -->

<root>

<merge mode="blend" />

<pass
	enable="true"
	drawLine="false"
>
	<standard
		ambient="0.2, 0.2, 0.2, 1.0"
		diffuse="0.8, 0.6, 0.5, 1.0"
		specular="0.5, 0.5, 0.5, 1.0"
		shininess="30.0"
	/>

	<!-- The first occuring texture will use texture unit 0 -->
	<texture
		file="../Fieldstone.jpg"
		shaderName="diffuseMap"
		filter="linear_linear_point"
	/>
	<texture
		file="../FieldstoneBumpDOT3.jpg"
		shaderName="normalMap"
		filter="linear_linear_point"
	/>

	<shader>
		<!-- Reference external file as vertex shader -->
		<vertex>
			<![CDATA[
#version 120
varying vec3 vertex, normal, tangent;
uniform mat4 g_WorldMatrix;

void main()
{
	gl_Position = ftransform();

	vertex = (gl_ModelViewMatrix * gl_Vertex).xyz;

	// No need to do normalize since we do it on fragment shader anyway
	normal = mat3(g_WorldMatrix) * gl_Normal;
	tangent = mat3(g_WorldMatrix) * gl_MultiTexCoord1.xyz;

	// texture coordinate
	gl_TexCoord[0] = gl_MultiTexCoord0 * 0.25;
}
			]]>
		<vertex/>

		<!-- Define the fragment shader just inside the xml -->
		<fragment>
			<![CDATA[
#version 120
varying vec3 vertex, normal, tangent;
uniform vec3 g_AmbientCube[6];
uniform sampler2D diffuseMap;
uniform sampler2D normalMap;

vec3 ambientLight( vec3 normal, vec3 ambientCube[6] )
{
	/* reference:
		http://www.valvesoftware.com/publications/2006/SIGGRAPH06_Course_ShadingInValvesSourceEngine.pdf
		page 6
	*/
	vec3 sqNormal = normal * normal;
	vec3 isNegative = step(normal, vec3(0.0, 0.0, 0.0));

	vec3 linearColor
		= sqNormal.x * ambientCube[int(isNegative.x)]
		+ sqNormal.y * ambientCube[int(isNegative.y) + 2]
		+ sqNormal.z * ambientCube[int(isNegative.z) + 4];

	return linearColor;
}

void main()
{
	vec3 T = tangent;
	vec3 B = cross(normal, T);

	vec3 bump = texture2D(normalMap, gl_TexCoord[0].xy).xyz;
	bump = normalize(bump * 2.0 - 1.0);

	// view space normal
	vec3 nrm = normalize
		( normalize(T) * bump.x
		+ normalize(B) * bump.y
		+ normalize(normal) * bump.z
		);

	vec4 base = texture2D(diffuseMap, gl_TexCoord[0].xy);
	float ndotv = max( 0, dot(normal, vec3(0,0,1)) );

	//gl_FragColor = base * ndotv;
	gl_FragColor = vec4( ambientLight( nrm, g_AmbientCube ), 1 );
}
			]]>
		</fragment>
	</shader>
</pass>

</root>