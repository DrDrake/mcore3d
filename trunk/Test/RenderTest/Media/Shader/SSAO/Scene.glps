varying vec3 normal, lightDir, halfVector;
varying vec2 texCoord;
uniform sampler2D tex;

void main(void)
{
	// Compute the diffuse, specular, ambient and globalAmbient terms.
	vec4 diffuse = gl_FrontLightProduct[0].diffuse;
	vec4 specular = gl_FrontLightProduct[0].specular;
	vec4 ambient = gl_FrontLightModelProduct.sceneColor;
	ambient += gl_FrontLightProduct[0].ambient;

	vec3 n, halfV;
	float NdotL, NdotHV;

	// The ambient term will always be present
	vec4 color = ambient;

	// A fragment shader can't write a varying variable, hence we need
	// a new variable to store the normalized interpolated normal.
	n = normalize(normal);

	// Compute the dot product between normal and ldir.
	// Since lightDir is a constant so there is no need to normalize it again
	NdotL = max(dot(n, lightDir), 0.0);

	if(NdotL > 0.0) {
		color += diffuse * NdotL;
		halfV = normalize(halfVector);
		NdotHV = max(dot(n, halfV), 0.0);
		color += specular * pow(NdotHV, gl_FrontMaterial.shininess);
	}

	gl_FragData[0] = color;// * texture2D(tex, texCoord);
	gl_FragData[1] = vec4(n * 0.5 + 0.5, 1);
}
